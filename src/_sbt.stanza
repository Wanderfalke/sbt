; get files in cur dir...
defn files (dir:String) -> List<String> :
    call-system(to-string("touch /tmp/files.tmp & ls %_ | column -c 1 > /tmp/files.tmp" % [dir])) ; Save output of column'd ls with call sys..
    val files-seq = split(slurp("/tmp/files.tmp"), "\n")  
    val files = to-list(files-seq) ;Split by newline..
    delete-file("/tmp/files.tmp")
    map({append(append(dir, "/") when not contains(dir, "/") else append(dir, "/"), _)}, files)

defn stanza-source-files (dir:String) -> Seq<String> : 
    filter({suffix?(_, ".stanza")}, files(dir)) ;Filter the files, return those who only end in .stanza

defn stanza-source-files-no-dir (dir:String) -> Vector<String> :
    val vec = Vector<String>()    
    for stanza-file in files(dir) do :
        if not contains(stanza-file, "/") :
            add(vec, stanza-file)    
        else :
            val data = to-array<String>(split(stanza-file, "/"))
            val last = data[length(data) - 1]
            add(vec, last)
    vec


defn c-files? (dir:String) -> True|False :
    length(c-files(dir)) > 0    

defn c-files (dir:String) -> List<String> : 
    to-list(filter({suffix?(_, ".c")}, files(dir)))

defn contains (str:String, look:String) -> True|False :
    index-of-chars(str, look) != false

defn last-index-of (source:String, by:String) -> String :
    val arr = to-array<String>(split(source, by))
    arr[length(arr) - 1]

defn output-file (dir:String) -> String:
    val resp = find({prefix?(last-index-of(_, "/"), "_")}, stanza-source-files-no-dir(dir)) ; Get the result, T|False...
    resp as String when not (resp is False) else "_default-comp.stanza"

defn main () : 
    var optimize = false 
    var verbose = false 
    var dir = false 
    var silent = false
    var run = false
    var custom-name = false 
    val args = command-line-arguments()
    var name-index = -1
    var dir-index = -1
    for flag in args do :
        if prefix?(flag, "-") :
            if flag == "-h" or flag == "--help" :
                println("usage: sbt [flags]")
                println("-h / --help | display this help")
                println("-d / --dir | specify source directory")
                println("-r / --run | run after compiling")
                println("-s / --silent | makes sbt shut up")
                println("-v / --verbose | use verbose flag for compiler")
                println("-o / --optimize | use optimize flag with compiler")
                println("-n / --name | use custom name for output file")
                exit(0)
            else if flag == "-o" or flag == "--optimize" :
                optimize = true
            else if flag == "-v" or flag == "--verbose" :
                verbose = false 
            else if flag == "-s" or flag == "--silent" :
                silent = true
            else if flag == "-r" or flag == "--run" :
                run = true
            else if flag == "-d" or flag == "--dir" :
                dir = true
                dir-index = index-of!(args, flag)
            else if flag == "-n" or flag == "--name" :
                custom-name = true
                name-index = index-of!(args, flag)
            else :
                println("Unrecognized flag %_" % [flag])
    var cust-dir = args[dir-index + 1] when dir else ""
    var o-file-data = to-array<String>(split(output-file(cust-dir), "."))[0]
    var o-file = append("bin/", o-file-data[1 to length(o-file-data)])
    if not silent :
        println("Compiling %_..." % [o-file])
    if custom-name :
        if length(args) < name-index or name-index < 0 :
            println("Found no custom name!")
            exit(1)
        else :
            o-file = args[name-index + 1]
    println("output = \"%_\"" % [o-file])
    val timer = MillisecondTimer("compile-timer")
    if not file-exists?("bin") : ; we aren't cavemen are we?
        call-system("mkdir bin")
    if not silent :
        for stanza-file in stanza-source-files(cust-dir) do : ; yo im lazy as-fk
            println("found stanza-source file  \"%_\"" % [stanza-file])
        if c-files?(cust-dir) :
            for c-file in c-files(cust-dir) do :
                println("found c file \"%_\"" % [c-file])
    start(timer)
    try :
        var base-str = to-string("stanza %_ -o %_" % [string-join(stanza-source-files(cust-dir), " "), o-file])
        if optimize :
            base-str = append(base-str, " -optimize")
        if verbose :
            base-str = append(base-str, " -verbose")
        if c-files?(cust-dir) :
            base-str = append(base-str, to-string("-ccfiles %_" % [string-join(c-files(cust-dir), " ")]))
        println("Calling \"%_\"" % [base-str])
        call-system(base-str)
    catch (e:Exception) : 
        println("Failed to compile!")
        exit(1)
    stop(timer)
    if run :
        call-system(to-string("./%_" % [o-file]))
    if not silent :
        println("Done! Took %_ ms." % [time(timer)])

main()
